| package |
package := Package name: 'Source Tracking System Server'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '6.1.26'.


package classNames
	add: #StsServerApplication;
	add: #StsServerManagerServlet;
	add: #StsServerShell;
	yourself.

package methodNames
	add: #StsManager -> #importProjectEditionFromRemoteServer:;
	add: #StsStoredChangeSetsBrowserShell -> #menuExportChangeSetToServer;
	add: #StsStoredChangeSetsBrowserShell -> #menuImportChangeSetFromServer;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Object Arts\Dolphin\IDE\Base\Development System';
	add: 'Dialect Abstraction Layer';
	add: '..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base';
	add: '..\Object Arts\Dolphin\MVP\Dialogs\Progress\Dolphin Progress Dialog';
	add: '..\Object Arts\Goodies\Internal Bitmaps and Icons\Internal Bitmaps and Icons';
	add: 'OmniBase';
	add: 'Source Tracking System';
	add: 'Source Tracking System Remote Client';
	add: 'Web Application StartUp';
	add: 'e-obracuni\Web Server';
	add: 'WikiDoc';
	add: 'Yaxo\YAXO DOM';
	add: 'ZLib Interface';
	yourself).

package!

"Class Definitions"!

WebApplicationServerShell subclass: #StsServerShell
	instanceVariableNames: ''
	classVariableNames: 'ServerPort'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WikiDocApplication subclass: #StsServerApplication
	instanceVariableNames: 'oldExceptionHandlerMethodSource'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServlet subclass: #StsServerManagerServlet
	instanceVariableNames: 'importQueueMutex importQueue currentImportProcess'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!StsManager methodsFor!

importProjectEditionFromRemoteServer: aShadowEdition 
	"This method will download and import selected project edition from the remote server."

	| doc project editionsToImport oid response httpClient urlPrefix progressDialog packageProxy atLeastOnePackage packageEditionsOIDs |
	httpClient := self getCurrentServerHttpClient.
	urlPrefix := self getCurrentServerUrlPrefix.
	progressDialog := ProgressDialog operation: 
					[:progress | 
					progressDialog 
						caption: 'Importing Project Edition: ' , aShadowEdition name , ' ' , aShadowEdition projectVersion.
					Cursor wait showWhile: 
							[response := httpClient post: urlPrefix , #processGetProjectEditionHeader:on: webAsActionString
										fields: (OrderedCollection with: 'projectEdition' -> aShadowEdition webSerializeToString)].
					response statusCode = 200 ifFalse: [self error: 'Invalid response from the server'].
					doc := XMLDOMParser parseDocumentFrom: (ReadStream on: response contents).
					project := StsProjectProxy new basicImportHeaderFromDocument: doc.
					project isNil ifTrue: [self error: 'Can not read project information from XML response'].
					"find out which project and package editions already exist and then send request only for editions that don't already exist"
					editionsToImport := OrderedCollection new.
					packageEditionsOIDs := Array new: project packages size.
					project packages doWithIndex: 
							[:eachPackageEdition :index | 
							Cursor wait showWhile: 
									[oid := self 
												findExistingPackageEdition: eachPackageEdition name
												versionDescriptor: eachPackageEdition packageVersion
												developer: eachPackageEdition developer
												timestamp: eachPackageEdition timestamp].
							oid isNil 
								ifFalse: [packageEditionsOIDs at: index put: oid]
								ifTrue: 
									["this edition should be downloaded and imported"
									editionsToImport add: index -> eachPackageEdition]].
					atLeastOnePackage := false.
					editionsToImport doWithIndex: 
							[:eachIndexAndPackageEdition :index | 
							progress value: 100 * index / (editionsToImport size + 1).
							progressDialog 
								caption: 'Downloading Package Edition: ' , eachIndexAndPackageEdition value name , ' ' 
										, eachIndexAndPackageEdition value version.
							Cursor wait showWhile: 
									[response := httpClient post: urlPrefix , #processGetPackageEdition:on: webAsActionString
												fields: (OrderedCollection 
														with: 'packageEdition' -> eachIndexAndPackageEdition value webSerializeToString)].
							response statusCode = 200 ifFalse: [self error: 'Invalid response from the server'].
							doc := XMLDOMParser parseDocumentFrom: (ReadStream on: response contents).
							packageProxy := StsXMLPackageProxy new basicImportFrom: doc topElement.
							Transcript
								nextPutAll: 'Versioning downloaded package ' , packageProxy name , ' version ' 
											, packageProxy version;
								cr.
							progressDialog 
								caption: 'Importing Project Edition: ' , aShadowEdition name , ' ' , aShadowEdition projectVersion.
							oid := self 
										basicVersionPackage: packageProxy
										versionDescriptor: packageProxy version
										previousEdition: nil
										blessing: packageProxy blessing
										comment: packageProxy comment
										versionComment: packageProxy versionComment
										checkExisting: true
										silentBool: false.
							packageEditionsOIDs at: eachIndexAndPackageEdition key put: oid.
							atLeastOnePackage := true].
					((packageEditionsOIDs allSatisfy: [:each | each notNil]) and: 
							[atLeastOnePackage or: 
									[(self 
										findExistingProjectEdition: project name
										versionDescriptor: project projectVersion
										developer: project developer
										timestamp: project timestamp) isNil]]) 
						ifTrue: 
							[self 
								basicVersionProject: project
								versionDescriptor: project projectVersion
								previousEdition: (self findProjectEditionForPreviousVersionData: project previousVersionsData
										projectName: project name)
								blessing: project blessing
								comment: project comment
								versionComment: project versionComment
								packageEditionOIDs: packageEditionsOIDs
								progress: nil
								tick: nil
								timestamp: project timestamp
								developer: project developer]].
	progressDialog
		caption: 'Please wait';
		showModal! !
!StsManager categoriesFor: #importProjectEditionFromRemoteServer:!distributed repository!operations!private! !

!StsStoredChangeSetsBrowserShell methodsFor!

menuExportChangeSetToServer
	| selection |
	(selection := self selectedItems) isNilOrEmpty 
		ifFalse: 
			[(self sourceControl connectToRemoteServerWithCaption: 'Exporting ' 
						, (selection size == 1 ifTrue: [selection first browserTitle] ifFalse: ['multiple change sets'])
				readOnlyAccess: false) isNil 
				ifFalse: [selection do: [:each | self sourceControl exportChangeSetToCurrentRemoteServer: each]]]!

menuImportChangeSetFromServer
	(self sourceControl connectToRemoteServerWithCaption: 'Importing Change Set' readOnlyAccess: true) 
		isNil ifTrue: [^self].
	StsServerImportChangeSetsBrowserShell showModal isNil 
		ifFalse: 
			["As dialog, if something is imported it is answered so update list."
			self menuUpdateList]! !
!StsStoredChangeSetsBrowserShell categoriesFor: #menuExportChangeSetToServer!public! !
!StsStoredChangeSetsBrowserShell categoriesFor: #menuImportChangeSetFromServer!public! !

"End of package definition"!

