| package |
package := Package name: 'Web Server'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: 'r 460 rc 4'.


package classNames
	add: #JavaScriptMinifier;
	add: #WebApplication;
	add: #WebGenericDownloadTask;
	add: #WebGenericTemporaryFileDownloadTask;
	add: #WebHttpAbstractFileServingServlet;
	add: #WebHttpCssFileServlet;
	add: #WebHttpFileServlet;
	add: #WebHttpGenericMemoryFileServlet;
	add: #WebHttpMultiPortLoadBalancer;
	add: #WebHttpOpenPortDetectionServlet;
	add: #WebHttpProxyServer;
	add: #WebHttpReceivedResponse;
	add: #WebHttpRedirectorServlet;
	add: #WebHttpRequest;
	add: #WebHttpRequestHeader;
	add: #WebHttpScriptFileServlet;
	add: #WebHttpServer;
	add: #WebHttpServlet;
	add: #WebHttpServletManager;
	add: #WebHttpsServer;
	add: #WebHttpStream;
	add: #WebHttpStreamForInternalRequests;
	add: #WebLoginServlet;
	add: #WebMainPageServlet;
	add: #WebSession;
	add: #WebSharedCacheDictionary;
	add: #WebTask;
	add: #WebTaskRoutingServlet;
	add: #WebTranslationService;
	yourself.

package methodNames
	add: #Association -> #asJavascriptValue;
	add: #Association -> #asJavascriptValueUTF8;
	add: #Association -> #translatedValue;
	add: #Character -> #asWebString;
	add: #Character -> #itcAsUppercase;
	add: #Character -> #itcIsAlphaNumeric;
	add: #Collection -> #asJavascriptArrayString;
	add: #Collection -> #asJavascriptArrayStringOn:;
	add: #Collection -> #asJavascriptValue;
	add: #Collection -> #asJavascriptValueUTF8;
	add: #Collection -> #asJavascriptValueWithDecimalsToFloats;
	add: #Collection -> #asWebString;
	add: #Date -> #asDayMonthString;
	add: #Date -> #asShortWebString;
	add: #Date -> #asWebString;
	add: #Date -> #webAsSqlString;
	add: #Date -> #webAsSqlStringIn:;
	add: #Dictionary -> #asJavascriptValue;
	add: #Dictionary -> #asJavascriptValueUTF8;
	add: #Dictionary -> #asJavascriptValueWithDecimalsToFloats;
	add: #False -> #asJavascriptValue;
	add: #False -> #asJavascriptValueUTF8;
	add: #False -> #asWebString;
	add: #Integer -> #asJavascriptValue;
	add: #Integer -> #asJavascriptValueUTF8;
	add: #Integer -> #asJavascriptValueWithDecimalsToFloats;
	add: #Integer -> #asWebString;
	add: #LookupTable -> #asJavascriptValue;
	add: #LookupTable -> #asJavascriptValueUTF8;
	add: #LookupTable -> #asJavascriptValueWithDecimalsToFloats;
	add: #Number -> #asJavascriptValue;
	add: #Number -> #asJavascriptValueUTF8;
	add: #Number -> #asJavascriptValueWithDecimalsToFloats;
	add: #Number -> #asTimeAmountString;
	add: #Number -> #asWebString;
	add: #Number -> #asWebStringWith2OrMoreDecimals;
	add: #Number -> #asWebStringWith2OrMoreDecimalsPrecisionValue;
	add: #Number -> #asWebStringWithMinimumDecimals;
	add: #Number -> #asWebStringWithMinimumDecimalsPrecisionValue;
	add: #Number -> #asWebStringWithPrecision:;
	add: #Object -> #asJavascriptValue;
	add: #Object -> #asJavascriptValueUTF8;
	add: #Object -> #asJavascriptValueWithDecimalsToFloats;
	add: #Object -> #asShortWebString;
	add: #Object -> #asWebString;
	add: #Object -> #asWebStringForHtml;
	add: #Object -> #asWebStringForHtmlWith2OrMoreDecimals;
	add: #Object -> #asWebStringForHtmlWithMinimumDecimals;
	add: #Object -> #asWebStringForHtmlWithPrecision:;
	add: #Object -> #asWebStringWith2OrMoreDecimals;
	add: #Object -> #asWebStringWithMinimumDecimals;
	add: #Object -> #asWebStringWithPrecision:;
	add: #Object -> #webRequest;
	add: #Object -> #webSerializeToString;
	add: #Object -> #webSession;
	add: #Object -> #webStream;
	add: #Object -> #webTranslate;
	add: #Process -> #language;
	add: #Process -> #language:;
	add: #Process -> #languageDict;
	add: #Process -> #webAjaxRequestJavascriptOnLoadCollector;
	add: #Process -> #webAjaxRequestJavascriptOnLoadCollectorContentsOrNil;
	add: #Process -> #webApplication;
	add: #Process -> #webApplication:;
	add: #Process -> #webHttpClientSocketToClose;
	add: #Process -> #webHttpClientSocketToClose:;
	add: #Process -> #webHttpRequestDeadline;
	add: #Process -> #webHttpRequestDeadline:;
	add: #Process -> #webHttpRequestExtendDeadline:;
	add: #Process -> #webHttpSocketToClose;
	add: #Process -> #webHttpSocketToClose:;
	add: #Process -> #webJavascriptLinks;
	add: #Process -> #webJavascriptLinksAdd:;
	add: #Process -> #webJavascriptLinksOrNil;
	add: #Process -> #webProcessingAjaxCodeSnippetRequest;
	add: #Process -> #webProcessingAjaxCodeSnippetRequest:;
	add: #Process -> #webProcessingAjaxRequest;
	add: #Process -> #webProcessingAjaxRequest:;
	add: #Process -> #webRequest;
	add: #Process -> #webRequest:;
	add: #Process -> #webRequestCodePage;
	add: #Process -> #webRequestCodePage:;
	add: #Process -> #webSession;
	add: #Process -> #webSession:;
	add: #Process -> #webStream;
	add: #Process -> #webStream:;
	add: #Process -> #webStyleSheetLinks;
	add: #Process -> #webStyleSheetLinksAdd:;
	add: #Process -> #webStyleSheetLinksOrNil;
	add: #Process -> #webTask;
	add: #Process -> #webTask:;
	add: #String -> #asHtmlString;
	add: #String -> #asJavascriptValue;
	add: #String -> #asJavascriptValueUTF8;
	add: #String -> #asJavascriptValueWithDecimalsToFloats;
	add: #String -> #asJavascriptWriteEncodedString;
	add: #String -> #asWebString;
	add: #String -> #isAjaxAction;
	add: #String -> #isAjaxGetAction;
	add: #String -> #itcAsUppercase;
	add: #String -> #printWebUrlOn:;
	add: #String -> #webAsActionString;
	add: #String -> #webDecrypted;
	add: #String -> #webDeserializeFromString;
	add: #String -> #webDisplaySize:;
	add: #String -> #webEncrypted;
	add: #String -> #webHtmlDecodedFromForm;
	add: #String -> #webHtmlEncoded;
	add: #String -> #webHtmlEncodedForForm;
	add: #String -> #webHtmlEncodedWithoutLineBreaks;
	add: #String -> #webHtmlEncodedWithoutLineBreaks:;
	add: #String -> #webHttpUrlDecode:;
	add: #String -> #webHttpUrlDecodePathComponent;
	add: #String -> #webHttpUrlDecodeQueryComponent;
	add: #String -> #webHttpUrlEncoded;
	add: #String -> #webHttpUrlEncodedForPathComponent;
	add: #String -> #webHttpUrlEncodedForPost;
	add: #String -> #webJavascriptStringEncoded;
	add: #String -> #webJavascriptStringEncodedOn:;
	add: #String -> #webRemoveHtmlFormatting;
	add: #String -> #webTranslate;
	add: #String -> #webTranslateIfAbsent:;
	add: #String -> #webTranslateInto:;
	add: #String -> #webTranslateIntoOrNil:;
	add: #String -> #webTranslateWith:;
	add: #String -> #webTranslateWith:into:;
	add: #String -> #webTranslateWith:with:;
	add: #String -> #webTranslateWith:with:into:;
	add: #String -> #webTranslateWith:with:with:;
	add: #String -> #webTranslateWith:with:with:ifAbsent:;
	add: #String -> #webTranslateWith:with:with:into:;
	add: #String -> #webTranslateWith:with:with:with:;
	add: #String -> #webTranslateWith:with:with:with:into:;
	add: #String -> #webTranslateWithArray:;
	add: #String -> #webTranslateWithArray:into:;
	add: #String -> #webUTF16Decoded;
	add: #String -> #webUTF8Decoded;
	add: #String -> #webXhtmlUrlEncodeForForm;
	add: #Symbol -> #asJavascriptValue;
	add: #Symbol -> #asWebActionUrlString;
	add: #Symbol -> #asWebString;
	add: #Symbol -> #webAsActionString;
	add: #Time -> #asShortWebString;
	add: #Time -> #asWebString;
	add: #Timestamp -> #asShortWebString;
	add: #Timestamp -> #asWebString;
	add: #Timestamp -> #webAsSqlString;
	add: #Timestamp -> #webAsSqlStringIn:;
	add: #True -> #asJavascriptValue;
	add: #True -> #asJavascriptValueUTF8;
	add: #True -> #asWebString;
	add: #UndefinedObject -> #asJavascriptValue;
	add: #UndefinedObject -> #asJavascriptValueUTF8;
	add: #UndefinedObject -> #asWebString;
	add: #UndefinedObject -> #getIntegerId;
	add: #UndefinedObject -> #isAjaxAction;
	add: #UndefinedObject -> #webAsActionString;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Dialect Abstraction Layer';
	add: '..\..\Object Arts\Dolphin\Base\Dolphin';
	add: '..\HTTP Client';
	add: '..\MD5';
	add: '..\OmniBase';
	add: '..\SMTP Support';
	add: '..\ZLib Interface';
	yourself).

package!

"Class Definitions"!

Object subclass: #JavaScriptMinifier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebApplication
	instanceVariableNames: 'db sessions sessionsSemaphore lastSessionId oidProvider scavenger expirationTime configurationSettings configurationSettingsMutex eMailQueueMutex eMailQueue eMailSendingMutex httpLoadBalancer serverClusterManager serverMessage scriptServlet cssServlet'
	classVariableNames: ''
	poolDictionaries: 'DialectAbstractionLayerNS'
	classInstanceVariableNames: 'singleton'!
Object subclass: #WebHttpMultiPortLoadBalancer
	instanceVariableNames: 'alternativeHttpPorts alternativeHttpsPorts lastHttpPortIndex lastHttpsPortIndex httpConnections httpsConnections application mutex lastProposedHttpPortIndex lastProposedHttpsPortIndex counterMutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebHttpReceivedResponse
	instanceVariableNames: 'clientStream headerLines contents keepAlive'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebHttpRequest
	instanceVariableNames: 'header contents formFields charactersMap isoCodesMap socketIP clientIP isHttps'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebHttpRequestHeader
	instanceVariableNames: 'lines command url version headerFields'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebHttpServer
	instanceVariableNames: 'serverPort listeningSocket daemon watchdog servletManager threadsCount connectionsCount redirections serverStartedTS threadsCountMutex requestCounterMutex serverStats serverStatsPosition'
	classVariableNames: 'Current'
	poolDictionaries: 'DialectAbstractionLayerNS'
	classInstanceVariableNames: 'defaultPort ipToHostnameDict ipToHostnameMutex'!
Object subclass: #WebHttpServlet
	instanceVariableNames: 'application'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebHttpServletManager
	instanceVariableNames: 'servlets fileServlets indexServlets domainNames allowRobots allowIPcoll blockIPcoll'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebHttpStream
	instanceVariableNames: 'socketStream contents cookie compressedContents responseStatus contentType contentEncoding responseLocation expires isBytes date lastModified noCache keepConnection cacheControl compressAlways contentDisposition acceptByteRanges contentRange eTag'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebSession
	instanceVariableNames: 'clientIP clientHostname loginTime pageHits language lastRequestTime id application user lastTaskId tasks defaultTask sessionData tracer thousandsSeparator decimalPoint userAgent isPersistent screenWidth screenHeight cookieId superSession dateFormat clientCookie mutex useEnterForTabbing'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebSharedCacheDictionary
	instanceVariableNames: 'mutex cache'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WebTask
	instanceVariableNames: 'application lastRequestTime superTask session taskId dummyCounter taskInactivated parentTopNavigation requestMutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
HttpTranslationService subclass: #WebTranslationService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServer subclass: #WebHttpProxyServer
	instanceVariableNames: 'proxyLog proxyLogMutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServer subclass: #WebHttpsServer
	instanceVariableNames: 'sslConfiguration'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServlet subclass: #WebHttpAbstractFileServingServlet
	instanceVariableNames: 'mimeMapping'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServlet subclass: #WebHttpOpenPortDetectionServlet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServlet subclass: #WebHttpRedirectorServlet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServlet subclass: #WebLoginServlet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServlet subclass: #WebMainPageServlet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpServlet subclass: #WebTaskRoutingServlet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpAbstractFileServingServlet subclass: #WebHttpFileServlet
	instanceVariableNames: 'rootPath numberOfCharactersToCut urlPrefix fileCache fileCacheMutex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpAbstractFileServingServlet subclass: #WebHttpGenericMemoryFileServlet
	instanceVariableNames: 'fileName fileBytes fileTimestamp'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpFileServlet subclass: #WebHttpScriptFileServlet
	instanceVariableNames: 'cache cacheMutex servletName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpScriptFileServlet subclass: #WebHttpCssFileServlet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebHttpStream subclass: #WebHttpStreamForInternalRequests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebTask subclass: #WebGenericDownloadTask
	instanceVariableNames: 'content fileName contentType attachmentFilename'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
WebGenericDownloadTask subclass: #WebGenericTemporaryFileDownloadTask
	instanceVariableNames: 'sourceFilePathname onTaskRemove'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Association methodsFor!

asJavascriptValue
	| ws |
	ws := WriteStream on: (String new: 128).
	ws
		nextPut: ${;
		nextPutAll: self key asString;
		nextPutAll: ': ';
		nextPutAll: self value asJavascriptValue;
		nextPut: $}.
	^ws contents!

asJavascriptValueUTF8
	| ws |
	ws := WriteStream on: (String new: 128).
	ws
		nextPut: ${;
		nextPutAll: self key asString;
		nextPutAll: ': ';
		nextPutAll: self value asJavascriptValueUTF8;
		nextPut: $}.
	^ws contents!

translatedValue
	^self value webTranslate! !
!Association categoriesFor: #asJavascriptValue!public! !
!Association categoriesFor: #asJavascriptValueUTF8!public! !
!Association categoriesFor: #translatedValue!public! !

!Character methodsFor!

asWebString
	^self asString!

itcAsUppercase
	"Answer a <Character> which is the uppercase equivalent of the receiver. Method is localized by active process code page. If conversion can't be done, use default functionality for windows-1250 code page (#defineIsoCodesMapCPWindows1250)."

	| i lowUppDef |
	lowUppDef := WebTranslationService 
				getLowerUpperDefinitionCodePageMapForCodePage: Processor activeProcess webRequestCodePage.
	lowUppDef first doWithIndex: [:each :ind | each == self ifTrue: [i := ind]].
	^i isNil ifTrue: [self] ifFalse: [lowUppDef last at: i]!

itcIsAlphaNumeric
	"Answer whether the receiver is a letter or a digit. Method is localized by active process code page. If conversion can't be done, use default functionality for windows-1250 code page (#defineIsoCodesMapCPWindows1250)."

	| lowUppDef |
	lowUppDef := WebTranslationService 
				getLowerUpperDefinitionCodePageMapForCodePage: Processor activeProcess webRequestCodePage.
	^(lowUppDef first includes: self) 
		or: [(lowUppDef last includes: self) or: ['0123456789' includes: self	"self isDigit"]]! !
!Character categoriesFor: #asWebString!public! !
!Character categoriesFor: #itcAsUppercase!converting!public! !
!Character categoriesFor: #itcIsAlphaNumeric!public!testing! !

!Collection methodsFor!

asJavascriptArrayString
	| ws |
	ws := WriteStream on: (String new: 128).
	self asJavascriptArrayStringOn: ws.
	^ws contents!

asJavascriptArrayStringOn: ws 
	ws nextPut: $[.
	1 to: self size
		do: 
			[:i | 
			i = 1 ifFalse: [ws nextPut: $,].
			(self at: i) isNil 
				ifFalse: 
					[ws nextPut: $".
					(self at: i) webJavascriptStringEncodedOn: ws.
					ws nextPut: $"]].
	ws nextPut: $]!

asJavascriptValue
	| ws |
	ws := WriteStream on: (String new: 128).
	ws nextPut: $[.
	1 to: self size
		do: 
			[:i | 
			i = 1 ifFalse: [ws nextPut: $,].
			ws nextPutAll: (self at: i) asJavascriptValue].
	ws nextPut: $].
	^ws contents!

asJavascriptValueUTF8
	| ws |
	ws := WriteStream on: (String new: 128).
	ws nextPut: $[.
	1 to: self size
		do: 
			[:i | 
			i = 1 ifFalse: [ws nextPut: $,].
			ws nextPutAll: (self at: i) asJavascriptValueUTF8].
	ws nextPut: $].
	^ws contents!

asJavascriptValueWithDecimalsToFloats
	| ws |
	ws := WriteStream on: (String new: 128).
	ws nextPut: $[.
	1 to: self size
		do: 
			[:i | 
			i = 1 ifFalse: [ws nextPut: $,].
			ws nextPutAll: (self at: i) asJavascriptValueWithDecimalsToFloats].
	ws nextPut: $].
	^ws contents!

asWebString

	| ws |
	ws := WriteStream on: (String new: 128).
	ws nextPutAll: '('.
	1 to: self size do: [:i |
		i = 1 ifFalse: [ws nextPut: $,].
		ws nextPutAll: (self at: i) asWebString ].
	ws nextPut: $).
	^ws contents! !
!Collection categoriesFor: #asJavascriptArrayString!public! !
!Collection categoriesFor: #asJavascriptArrayStringOn:!public! !
!Collection categoriesFor: #asJavascriptValue!public! !
!Collection categoriesFor: #asJavascriptValueUTF8!public! !
!Collection categoriesFor: #asJavascriptValueWithDecimalsToFloats!public! !
!Collection categoriesFor: #asWebString!public! !

!Date methodsFor!

asDayMonthString
	^self asWebString copyFrom: 1 to: 6!

asShortWebString
	| session |
	^ItcConverter getShortStringFromDate: self
		dateFormat: ((session := self webSession) isNil ifFalse: [session dateFormat])!

asWebString
	| session |
	^ItcConverter getStringFromDate: self
		dateFormat: ((session := self webSession) isNil ifFalse: [session dateFormat])!

webAsSqlString
	^self webAsSqlStringIn: Processor activeProcess webApplication!

webAsSqlStringIn: application

	| ws |
	ws := WriteStream on: (String new: 16).
	application dbConnectionClass objectModelFactory typeDate putValue: self on: ws.
	^ws contents! !
!Date categoriesFor: #asDayMonthString!public! !
!Date categoriesFor: #asShortWebString!public! !
!Date categoriesFor: #asWebString!public! !
!Date categoriesFor: #webAsSqlString!public! !
!Date categoriesFor: #webAsSqlStringIn:!public! !

!Dictionary methodsFor!

asJavascriptValue
	| ws firstTimeTrough |
	ws := WriteStream on: (String new: 128).
	ws nextPut: ${.
	firstTimeTrough := true.
	self keysAndValuesDo: 
			[:eachKey :eachValue | 
			firstTimeTrough == true ifTrue: [firstTimeTrough := false] ifFalse: [ws nextPut: $,].
			ws
				nextPutAll: eachKey asString;
				nextPutAll: ': ';
				nextPutAll: eachValue asJavascriptValue].
	ws nextPut: $}.
	^ws contents!

asJavascriptValueUTF8
	| ws firstTimeTrough |
	ws := WriteStream on: (String new: 128).
	ws nextPut: ${.
	firstTimeTrough := true.
	self keysAndValuesDo: 
			[:eachKey :eachValue | 
			firstTimeTrough == true ifTrue: [firstTimeTrough := false] ifFalse: [ws nextPut: $,].
			ws
				nextPutAll: eachKey asString;
				nextPutAll: ': ';
				nextPutAll: eachValue asJavascriptValueUTF8].
	ws nextPut: $}.
	^ws contents!

asJavascriptValueWithDecimalsToFloats
	| ws firstTimeTrough |
	ws := WriteStream on: (String new: 128).
	ws nextPut: ${.
	firstTimeTrough := true.
	self keysAndValuesDo: 
			[:eachKey :eachValue | 
			firstTimeTrough == true ifTrue: [firstTimeTrough := false] ifFalse: [ws nextPut: $,].
			ws
				nextPutAll: eachKey asString;
				nextPutAll: ': ';
				nextPutAll: eachValue asJavascriptValueWithDecimalsToFloats].
	ws nextPut: $}.
	^ws contents! !
!Dictionary categoriesFor: #asJavascriptValue!constants!converting!public! !
!Dictionary categoriesFor: #asJavascriptValueUTF8!constants!converting!public! !
!Dictionary categoriesFor: #asJavascriptValueWithDecimalsToFloats!constants!converting!public! !

!False methodsFor!

asJavascriptValue
	^'false'!

asJavascriptValueUTF8
	^self asJavascriptValue!

asWebString
	^'asp.label.No' webTranslate! !
!False categoriesFor: #asJavascriptValue!public! !
!False categoriesFor: #asJavascriptValueUTF8!public! !
!False categoriesFor: #asWebString!public! !

!Integer methodsFor!

asJavascriptValue
	^self printString!

asJavascriptValueUTF8
	^self asJavascriptValue!

asJavascriptValueWithDecimalsToFloats
	^self printString!

asWebString

	^self printString! !
!Integer categoriesFor: #asJavascriptValue!public! !
!Integer categoriesFor: #asJavascriptValueUTF8!public! !
!Integer categoriesFor: #asJavascriptValueWithDecimalsToFloats!public! !
!Integer categoriesFor: #asWebString!public! !

!LookupTable methodsFor!

asJavascriptValue
	| ws firstTimeTrough |
	ws := WriteStream on: (String new: 128).
	ws nextPut: ${.
	firstTimeTrough := true.
	self keysAndValuesDo: 
			[:eachKey :eachValue | 
			firstTimeTrough == true ifTrue: [firstTimeTrough := false] ifFalse: [ws nextPut: $,].
			ws
				nextPutAll: eachKey asString;
				nextPutAll: ': ';
				nextPutAll: eachValue asJavascriptValue].
	ws nextPut: $}.
	^ws contents!

asJavascriptValueUTF8
	| ws firstTimeTrough |
	ws := WriteStream on: (String new: 128).
	ws nextPut: ${.
	firstTimeTrough := true.
	self keysAndValuesDo: 
			[:eachKey :eachValue | 
			firstTimeTrough == true ifTrue: [firstTimeTrough := false] ifFalse: [ws nextPut: $,].
			ws
				nextPutAll: eachKey asString;
				nextPutAll: ': ';
				nextPutAll: eachValue asJavascriptValueUTF8].
	ws nextPut: $}.
	^ws contents!

asJavascriptValueWithDecimalsToFloats
	| ws firstTimeTrough |
	ws := WriteStream on: (String new: 128).
	ws nextPut: ${.
	firstTimeTrough := true.
	self keysAndValuesDo: 
			[:eachKey :eachValue | 
			firstTimeTrough == true ifTrue: [firstTimeTrough := false] ifFalse: [ws nextPut: $,].
			ws
				nextPutAll: eachKey asString;
				nextPutAll: ': ';
				nextPutAll: eachValue asJavascriptValueWithDecimalsToFloats].
	ws nextPut: $}.
	^ws contents! !
!LookupTable categoriesFor: #asJavascriptValue!constants!converting!public! !
!LookupTable categoriesFor: #asJavascriptValueUTF8!constants!converting!public! !
!LookupTable categoriesFor: #asJavascriptValueWithDecimalsToFloats!constants!converting!public! !

!Number methodsFor!

asJavascriptValue
	| session |
	session := self webSession.
	^'''' , (ItcConverter 
				getStringFromNumber: self
				scale: 30
				precision: 2
				thousandsSeparator: (session isNil 
						ifTrue: [WebTranslationService thousandsSeparator]
						ifFalse: [session thousandsSeparator])
				decimalPoint: (session isNil 
						ifTrue: [WebTranslationService decimalPoint]
						ifFalse: [session decimalPoint])) 
		, ''''!

asJavascriptValueUTF8
	^self asJavascriptValue!

asJavascriptValueWithDecimalsToFloats
	| result |
	result := ItcConverter 
				getStringFromNumber: self
				scale: 30
				precision: 10
				thousandsSeparator: nil
				decimalPoint: $..
	[result last = $0 and: [(result at: result size - 1) ~= $.]] 
		whileTrue: [result := result copyFrom: 1 to: result size - 1].
	^result!

asTimeAmountString
	| decimals hours minutes |
	hours := self truncated.
	decimals := self - hours.
	minutes := (decimals * 60) rounded.
	^hours printString , ':' , (minutes asLeadingZerosStringOfSize: 2)!

asWebString
	^self asWebStringWithPrecision: 2!

asWebStringWith2OrMoreDecimals
	"Izpise stevilko tako, da je najmanj 2 decimalni mesti ce pajih je vec pa jih izpise toliko koliko jih je - najvec 6 decimalnih mest."

	^self asWebStringWithPrecision: self asWebStringWith2OrMoreDecimalsPrecisionValue!

asWebStringWith2OrMoreDecimalsPrecisionValue
	"Calculate precision with minimum 2, and maximum 6 decimal points."

	| k n num |
	num := (self * 1000000.0s) rounded / 1000000.
	n := 2.
	k := 100.
	[(num * k) truncated = (num * k) or: [n > 5]] whileFalse: 
			[n := n + 1.
			k := k * 10].
	^n!

asWebStringWithMinimumDecimals
	"Izpise stevilko tako, da se decimalke izpisejo samo v primeru, ko zares obstajajo.
	Ampak v vsakem primeru se izpise najvec do 6 decimalnih mest."

	^self asWebStringWithPrecision: self asWebStringWithMinimumDecimalsPrecisionValue!

asWebStringWithMinimumDecimalsPrecisionValue
	"Calculate precision with minimum 0, and maximum 6 decimal points."

	| k n num |
	num := (self * 1000000.0s) rounded / 1000000.0s.
	n := 0.
	k := 1.
	[(num * k) truncated = (num * k) or: [n > 5]] whileFalse: 
			[n := n + 1.
			k := k * 10].
	^n!

asWebStringWithPrecision: precision 
	| targetLanguage ts dp |
	(targetLanguage := Processor activeProcess attributes at: #targetLanguage ifAbsent: []) isNil 
		ifFalse: 
			[ts := WebTranslationService thousandsSeparatorFor: targetLanguage.
			dp := WebTranslationService decimalPointFor: targetLanguage]
		ifTrue: 
			[| session |
			(session := self webSession) isNil 
				ifTrue: 
					[ts := WebTranslationService thousandsSeparator.
					dp := WebTranslationService decimalPoint]
				ifFalse: 
					[ts := session thousandsSeparator.
					dp := session decimalPoint]].
	^ItcConverter 
		getStringFromNumber: self
		scale: 30
		precision: (precision isNil ifTrue: [2] ifFalse: [precision])
		thousandsSeparator: ts
		decimalPoint: dp! !
!Number categoriesFor: #asJavascriptValue!public! !
!Number categoriesFor: #asJavascriptValueUTF8!public! !
!Number categoriesFor: #asJavascriptValueWithDecimalsToFloats!public! !
!Number categoriesFor: #asTimeAmountString!public! !
!Number categoriesFor: #asWebString!public! !
!Number categoriesFor: #asWebStringWith2OrMoreDecimals!public! !
!Number categoriesFor: #asWebStringWith2OrMoreDecimalsPrecisionValue!public! !
!Number categoriesFor: #asWebStringWithMinimumDecimals!public! !
!Number categoriesFor: #asWebStringWithMinimumDecimalsPrecisionValue!public! !
!Number categoriesFor: #asWebStringWithPrecision:!public! !

!Object methodsFor!

asJavascriptValue
	^self asWebString asJavascriptValue!

asJavascriptValueUTF8
	^self asWebString asJavascriptValueUTF8!

asJavascriptValueWithDecimalsToFloats
	^self asJavascriptValue!

asShortWebString

	^self asWebString!

asWebString
	^self displayString!

asWebStringForHtml
	^self asWebString!

asWebStringForHtmlWith2OrMoreDecimals
	^self asWebStringWith2OrMoreDecimals!

asWebStringForHtmlWithMinimumDecimals
	^self asWebStringWithMinimumDecimals!

asWebStringForHtmlWithPrecision: precision 
	^self asWebStringWithPrecision: precision!

asWebStringWith2OrMoreDecimals
	^self asWebString!

asWebStringWithMinimumDecimals
	^self asWebString!

asWebStringWithPrecision: precision

	^self asWebString!

webRequest
	"Answer the current HTTP request which started the current process."

	^Processor activeProcess webRequest!

webSerializeToString
	^ItcBase64EncoderDecoder encode: (ODBSerializer serializeToBytes: self)!

webSession
	^Processor activeProcess webSession!

webStream
	"Answer the socket stream ie. an instance of WebHttpStream, which is waiting for the result of current process which is processing request."

	^Processor activeProcess webStream!

webTranslate
	^self asWebString! !
!Object categoriesFor: #asJavascriptValue!public! !
!Object categoriesFor: #asJavascriptValueUTF8!public! !
!Object categoriesFor: #asJavascriptValueWithDecimalsToFloats!public! !
!Object categoriesFor: #asShortWebString!public! !
!Object categoriesFor: #asWebString!public! !
!Object categoriesFor: #asWebStringForHtml!public! !
!Object categoriesFor: #asWebStringForHtmlWith2OrMoreDecimals!public! !
!Object categoriesFor: #asWebStringForHtmlWithMinimumDecimals!public! !
!Object categoriesFor: #asWebStringForHtmlWithPrecision:!public! !
!Object categoriesFor: #asWebStringWith2OrMoreDecimals!public! !
!Object categoriesFor: #asWebStringWithMinimumDecimals!public! !
!Object categoriesFor: #asWebStringWithPrecision:!public! !
!Object categoriesFor: #webRequest!public! !
!Object categoriesFor: #webSerializeToString!public! !
!Object categoriesFor: #webSession!public! !
!Object categoriesFor: #webStream!public! !
!Object categoriesFor: #webTranslate!public! !

!Process methodsFor!

language

	^self attributes at: #webLanguage ifAbsent: [WebTranslationService defaultLanguage] !

language: languageName 
	(self attributes)
		at: #webLanguage put: languageName;
		at: #webLanguageDict put: (WebTranslationService languageDictFor: languageName)!

languageDict

	^self attributes at: #webLanguageDict
		ifAbsent: [WebTranslationService languageDictFor: WebTranslationService defaultLanguage] !

webAjaxRequestJavascriptOnLoadCollector
	^self attributes at: #webAjaxRequestJavascriptOnLoadCollector
		ifAbsentPut: [WriteStream on: String new]!

webAjaxRequestJavascriptOnLoadCollectorContentsOrNil
	| stream |
	^(stream := self attributes at: #webAjaxRequestJavascriptOnLoadCollector ifAbsent: []) isNil 
		ifFalse: [stream contents]!

webApplication
	^self attributes at: #webApplication
		ifAbsent: [self webSession isNil ifFalse: [self webSession application]]!

webApplication: aWebApplication 
	self attributes at: #webApplication put: aWebApplication!

webHttpClientSocketToClose
	"Answer socket connection associated with this thread which has to be closed before terminating this thread."

	^self attributes at: #webHttpClientSocketToClose ifAbsent: []!

webHttpClientSocketToClose: aSocket 
	self attributes at: #webHttpClientSocketToClose put: aSocket!

webHttpRequestDeadline
	^self attributes at: #webHttpRequestDeadline ifAbsent: []!

webHttpRequestDeadline: anInteger 
	self attributes at: #webHttpRequestDeadline put: anInteger!

webHttpRequestExtendDeadline: anIntegerSeconds 
	"Extends current deadline to an additional <anInteger> seconds."

	| currentDeadline newDeadline |
	newDeadline := (currentDeadline := self webHttpRequestDeadline) isNil 
				ifTrue: [ItcSystemManager absoluteSecondsClockValue + anIntegerSeconds]
				ifFalse: [currentDeadline + anIntegerSeconds].
	self attributes at: #webHttpRequestDeadline put: newDeadline!

webHttpSocketToClose
	"Answer socket connection associated with this thread which has to be closed before terminating this thread."

	^self attributes at: #webHttpSocketToClose ifAbsent: []!

webHttpSocketToClose: aSocket 
	self attributes at: #webHttpSocketToClose put: aSocket!

webJavascriptLinks
	^self attributes at: #webJavascriptLinks ifAbsentPut: [OrderedCollection new]!

webJavascriptLinksAdd: scriptPath 
	| newScriptPath |
	newScriptPath := self webApplication getRealJavascriptPathFor: scriptPath.
	self webJavascriptLinks detect: [:each | each = newScriptPath]
		ifNone: [self webJavascriptLinks add: newScriptPath]!

webJavascriptLinksOrNil
	^self attributes at: #webJavascriptLinks ifAbsent: []!

webProcessingAjaxCodeSnippetRequest
	^self attributes at: #webProcessingAjaxCodeSnippetRequest ifAbsent: [false]!

webProcessingAjaxCodeSnippetRequest: aBoolean 
	self attributes at: #webProcessingAjaxCodeSnippetRequest put: aBoolean!

webProcessingAjaxRequest
	^self attributes at: #webProcessingAjaxRequest ifAbsent: [false]!

webProcessingAjaxRequest: aBoolean 
	self attributes at: #webProcessingAjaxRequest put: aBoolean!

webRequest
	^self attributes at: #webRequest ifAbsent: []!

webRequest: aWebHttpRequest 
	self attributes at: #webRequest put: aWebHttpRequest!

webRequestCodePage
	| app |
	app := self webApplication.
	^self attributes at: #webRequestCodePage ifAbsent: [app isNil ifFalse: [app defaultCodePage]]!

webRequestCodePage: aStringOrNil 
	self attributes at: #webRequestCodePage put: aStringOrNil!

webSession
	^self attributes at: #webSession
		ifAbsent: [self webTask isNil ifFalse: [self webTask session]]!

webSession: aWebSession 
	self attributes at: #webSession put: aWebSession!

webStream
	^self attributes at: #webStream ifAbsent: []!

webStream: aWebHttpStream 
	self attributes at: #webStream put: aWebHttpStream!

webStyleSheetLinks
	^self attributes at: #webStyleSheetLinks ifAbsentPut: [OrderedCollection new]!

webStyleSheetLinksAdd: cssPath 
	| newCssPath |
	newCssPath := self webApplication getRealCssPathFor: cssPath.
	self webStyleSheetLinks detect: [:each | each = newCssPath]
		ifNone: [self webStyleSheetLinks add: newCssPath]!

webStyleSheetLinksOrNil
	^self attributes at: #webStyleSheetLinks ifAbsent: []!

webTask
	^self attributes at: #webTask ifAbsent: []!

webTask: aWebTask 
	self attributes at: #webTask put: aWebTask! !
!Process categoriesFor: #language!public! !
!Process categoriesFor: #language:!public! !
!Process categoriesFor: #languageDict!public! !
!Process categoriesFor: #webAjaxRequestJavascriptOnLoadCollector!public! !
!Process categoriesFor: #webAjaxRequestJavascriptOnLoadCollectorContentsOrNil!public! !
!Process categoriesFor: #webApplication!public! !
!Process categoriesFor: #webApplication:!public! !
!Process categoriesFor: #webHttpClientSocketToClose!public! !
!Process categoriesFor: #webHttpClientSocketToClose:!public! !
!Process categoriesFor: #webHttpRequestDeadline!public! !
!Process categoriesFor: #webHttpRequestDeadline:!public! !
!Process categoriesFor: #webHttpRequestExtendDeadline:!public! !
!Process categoriesFor: #webHttpSocketToClose!public! !
!Process categoriesFor: #webHttpSocketToClose:!public! !
!Process categoriesFor: #webJavascriptLinks!public! !
!Process categoriesFor: #webJavascriptLinksAdd:!public! !
!Process categoriesFor: #webJavascriptLinksOrNil!public! !
!Process categoriesFor: #webProcessingAjaxCodeSnippetRequest!public! !
!Process categoriesFor: #webProcessingAjaxCodeSnippetRequest:!public! !
!Process categoriesFor: #webProcessingAjaxRequest!public! !
!Process categoriesFor: #webProcessingAjaxRequest:!public! !
!Process categoriesFor: #webRequest!public! !
!Process categoriesFor: #webRequest:!public! !
!Process categoriesFor: #webRequestCodePage!public! !
!Process categoriesFor: #webRequestCodePage:!public! !
!Process categoriesFor: #webSession!public! !
!Process categoriesFor: #webSession:!public! !
!Process categoriesFor: #webStream!public! !
!Process categoriesFor: #webStream:!public! !
!Process categoriesFor: #webStyleSheetLinks!public! !
!Process categoriesFor: #webStyleSheetLinksAdd:!public! !
!Process categoriesFor: #webStyleSheetLinksOrNil!public! !
!Process categoriesFor: #webTask!public! !
!Process categoriesFor: #webTask:!public! !

!String methodsFor!

asHtmlString

	^self copyReplaceAll: ' ' with: '&nbsp;'!

asJavascriptValue
	^'''' , self webJavascriptStringEncoded , ''''!

asJavascriptValueUTF8
	^'''' , (self webJavascriptStringEncoded asUTF8 copyFrom: 4) , ''''!

asJavascriptValueWithDecimalsToFloats
	^self asJavascriptValue!

asJavascriptWriteEncodedString
	"Metoda zakodira string (npr. link za e-mail naslov) v Javascript kodo, ki se po izvedbi konvertira v vsebino page-a."

	| ws |
	ws := WriteStream on: String new.
	1 to: self size
		do: [:i | ws nextPutAll: 'document.write(' , (self at: i) asString asJavascriptValue , ');'].
	^ws contents!

asWebString

	^self!

isAjaxAction
	self size > 7 ifFalse: [^false].
	((self beginsWith: 'ajaxGet') or: [self beginsWith: 'ajaxPost']) ifFalse: [^false].
	^(self includes: $() not!

isAjaxGetAction
	self size > 7 ifFalse: [^false].
	^self beginsWith: 'ajaxGet'!

itcAsUppercase
	^self collect: [:each | each itcAsUppercase]!

printWebUrlOn: aStream

	aStream nextPutAll: self!

webAsActionString
	^self!

webDecrypted
	"Answer the receiver uudecoded from our 'secret' format.
	Answer <nil> if not valid encoding."

	| odd even str lo hi |
	self size \\ 2 = 0 ifFalse: [^nil].
	odd := 'MATEJaDvid1myhec'.
	even := '197420urosmajleg'.
	str := self class new: self size // 2.
	1 to: str size
		do: 
			[:i | 
			(lo := odd indexOf: (self at: i * 2 - 1)) = 0 ifTrue: [^nil].
			(hi := even indexOf: (self at: i * 2)) = 0 ifTrue: [^nil].
			str at: i put: ((hi - 1) * 16 + lo - 1 bitXor: i \\ 256) asCharacter].
	^str!

webDeserializeFromString
	"If this string represents a serialized Smalltalk object, then deserialize data an instantiate a copy of that object.
	Answer <nil> if no object can be instantiated.
	See also #webSerializeToString
	"

	| result |
	[result := ODBDeserializer deserializeFromBytes: (ItcBase64EncoderDecoder decode: self) asByteArray] 
		on: Error
		do: [:ex | ex exitWith: nil].
	^result!

webDisplaySize: maxSize

	^self size > maxSize
		ifTrue: [(self copyFrom: 1 to: maxSize - 3), '...']
		ifFalse: [self]!

webEncrypted
		"Answer the receiver uuencoded in our 'secret' format."

	| odd even str ascii |
	odd := 'MATEJaDvid1myhec'.
	even := '197420urosmajleg'.
	str := self class new: self size * 2.
	1 to: self size do: [:i |
		ascii := (self at: i) asInteger bitXor: i \\ 256.
		str at: i * 2 - 1 put: (odd at: ascii \\ 16 + 1);
			at: i * 2 put: (even at: ascii // 16 + 1) ].
	^str!

webHtmlDecodedFromForm
	"Special method for decoding only characters which can not go into form fields. Inverting #webHtmlEncodedForForm"

	| str |
	str := self copy.
	str := str itcReplaceAllSubstrings: '&gt;' with: '>'.
	str := str itcReplaceAllSubstrings: '&lt;' with: '<'.
	str := str itcReplaceAllSubstrings: '&quot;' with: '"'.
	str := str itcReplaceAllSubstrings: '&amp;' with: '&'.
	^str!

webHtmlEncoded
	| readStream writeStream ch wasSpace wasCr wasLf col ascii |
	readStream := ReadStream on: self.
	writeStream := WriteStream on: (String new: self size + 200).
	wasSpace := false.
	wasCr := false.
	wasLf := false.
	col := 0.
	[readStream atEnd] whileFalse: 
			[ch := readStream next.
			ascii := ch asInteger.
			ascii == 13 
				ifTrue: 
					[wasCr := true.
					wasSpace := false.
					wasLf := false.
					writeStream nextPutAll: '<br />'.
					col := 0]
				ifFalse: 
					[ascii == 10 
						ifTrue: 
							[wasLf := true.
							wasSpace := false.
							wasCr 
								ifFalse: 
									[writeStream nextPutAll: '<br />'.
									col := 0]]
						ifFalse: 
							[ascii == 9 
								ifTrue: 
									["expand tabs"
									8 - (col \\ 8) timesRepeat: 
											[col := col + 1.
											wasSpace 
												ifFalse: 
													[writeStream nextPut: $ .
													wasSpace := true]
												ifTrue: [writeStream nextPutAll: '&nbsp;']]]
								ifFalse: 
									[col := col + 1.
									ch = $  
										ifTrue: 
											[(wasSpace or: [wasLf or: [wasCr]]) 
												ifTrue: [writeStream nextPutAll: '&nbsp;']
												ifFalse: [writeStream nextPut: ch].
											wasSpace := true]
										ifFalse: 
											[wasSpace := false.
											ch = $> 
												ifTrue: [writeStream nextPutAll: '&gt;']
												ifFalse: 
													[ch = $< 
														ifTrue: [writeStream nextPutAll: '&lt;']
														ifFalse: 
															[ch = $" 
																ifTrue: [writeStream nextPutAll: '&quot;']
																ifFalse: 
																	[(ch = $& and: [readStream atEnd not and: [readStream peek ~= $#]]) 
																		ifTrue: [writeStream nextPutAll: '&amp;']
																		ifFalse: [writeStream nextPut: ch]]]]]].
							wasLf := false].
					wasCr := false]].
	^writeStream contents!

webHtmlEncodedForForm
	"Special method for encoding only characters which can not go into form fields."

	| readStream writeStream ch |
	readStream := ReadStream on: self.
	writeStream := WriteStream on: (String new: 512).
	[readStream atEnd] whileFalse: 
			[ch := readStream next.
			"ch asInteger < 32 
				ifTrue: 
					[writeStream
						nextPutAll: '&#';
						nextPutAll: ch asInteger printString;
						nextPut: $;]
				ifFalse: 
					["
			ch = $> 
				ifTrue: [writeStream nextPutAll: '&gt;']
				ifFalse: 
					[ch = $< 
						ifTrue: [writeStream nextPutAll: '&lt;']
						ifFalse: 
							[ch = $" 
								ifTrue: [writeStream nextPutAll: '&quot;']
								ifFalse: 
									[ch = $& ifTrue: [writeStream nextPutAll: '&amp;'] ifFalse: [writeStream nextPut: ch]]]]].
	^writeStream contents!

webHtmlEncodedWithoutLineBreaks
	| readStream writeStream ch wasSpace wasCr wasLf |
	readStream := ReadStream on: self.
	writeStream := WriteStream on: (String new: self size + 200).
	wasSpace := false.
	wasCr := false.
	wasLf := false.
	[readStream atEnd] whileFalse: 
			[ch := readStream next.
			ch asInteger = 13 
				ifTrue: 
					[wasCr := true.
					wasSpace := false.
					wasLf := false.
					writeStream nextPutAll: ' ']
				ifFalse: 
					[ch asInteger = 10 
						ifTrue: 
							[wasLf := true.
							wasSpace := false.
							wasCr ifFalse: [writeStream nextPutAll: ' ']]
						ifFalse: 
							[ch = $  
								ifTrue: 
									[(wasSpace or: [wasLf or: [wasCr]]) 
										ifTrue: [writeStream nextPutAll: '&nbsp;']
										ifFalse: [writeStream nextPut: ch].
									wasSpace := true]
								ifFalse: 
									[wasSpace := false.
									ch = $> 
										ifTrue: [writeStream nextPutAll: '&gt;']
										ifFalse: 
											[ch = $< 
												ifTrue: [writeStream nextPutAll: '&lt;']
												ifFalse: 
													[ch = $" 
														ifTrue: [writeStream nextPutAll: '&quot;']
														ifFalse: 
															[(ch = $& and: [readStream atEnd not and: [readStream peek ~= $#]]) 
																ifTrue: [writeStream nextPutAll: '&amp;']
																ifFalse: [writeStream nextPut: ch]]]]].
							wasLf := false].
					wasCr := false]].
	^writeStream contents!

webHtmlEncodedWithoutLineBreaks: aBoolean 
	^aBoolean = true ifTrue: [self webHtmlEncodedWithoutLineBreaks] ifFalse: [self webHtmlEncoded]!

webHttpUrlDecode: escapeReservedCharactersBoolean 
	"ACTION
		Decode the receiver, assumed to be in x-www-url-encoding.
		According to RFC 2396 (www.ietf.org) there are certain cases where the url will contain
		charachters that are reserved and should not be decoded to their unreserved definition.
		The character that we are conerned with here is the '+'.  When you are decoding a part of
		the url referred to as a path component, you *do not* want to substitute a space for the
		'+'.  However, when you are working with a query portion of the url (stuff after the?) then
		you want to 'escape' a '+' for a space.


	RETURN VALUE
		<instance of self>"

	"if the string does not contain any reserved characters, don't do anything"

	| i size resultStream ch d1 d2 |
	(self findFirst: [:eachChar | eachChar == $% or: [eachChar == $+]]) == 0 ifTrue: [^self].
	resultStream := WriteStream on: (self species new: (size := self size)).
	i := 1.
	[i <= size] whileTrue: 
			[((ch := self at: i) == $+ and: [escapeReservedCharactersBoolean]) 
				ifTrue: [resultStream space]
				ifFalse: 
					[ch == $% 
						ifTrue: 
							[i + 2 > self size 
								ifFalse: 
									[d1 := (self at: i + 1) asUppercase digitValue.
									d2 := (self at: i + 2) asUppercase digitValue.
									ch := (d1 = -1 or: [d2 = -1]) 
												ifTrue: 
													["if there are invalid HEX characters, then decode as space"
													$ ]
												ifFalse: [(d1 * 16 + d2) asCharacter].
									i := i + 2]].
					resultStream nextPut: ch].
			i := i + 1].
	^resultStream contents!

webHttpUrlDecodePathComponent

	^self webHttpUrlDecode: false!

webHttpUrlDecodeQueryComponent

	^self webHttpUrlDecode: true!

webHttpUrlEncoded
	"Answer the receiver encoded in x-www-form-urlencoded format."

	| stream specialCharacters hexCharSet i |
	hexCharSet := '0123456789ABCDEF'.
	specialCharacters := #($~ $/ $[ $\ $] $^ $` $: $; $< $= $> $? $@ $" $' $# $% $& ${ $| $} $+).
	stream := WriteStream on: (self species new: self size).
	self do: 
			[:ch | 
			i := ch asInteger.
			(i < 32 or: [i > 127 or: [specialCharacters includes: ch]]) 
				ifTrue: 
					[stream nextPut: $%.
					stream
						nextPut: (hexCharSet at: i // 16 + 1);
						nextPut: (hexCharSet at: i \\ 16 + 1)]
				ifFalse: [ch = $  ifTrue: [stream nextPut: $+] ifFalse: [stream nextPut: ch]]].
	^stream contents!

webHttpUrlEncodedForPathComponent
	"Answer the receiver encoded in x-www-form-urlencoded format.
	The space is encoded as %20 and not as plus sign."

	| stream specialCharacters hexCharSet i |
	hexCharSet := '0123456789ABCDEF'.
	specialCharacters := #($~ $/ $[ $\ $] $^ $` $: $; $< $= $> $? $@ $" $' $# $% $& ${ $| $} $+).
	stream := WriteStream on: (self species new: self size).
	self do: 
			[:ch | 
			i := ch asInteger.
			(i <= 32 or: [i > 127 or: [specialCharacters includes: ch]]) 
				ifTrue: 
					[stream nextPut: $%.
					stream
						nextPut: (hexCharSet at: i // 16 + 1);
						nextPut: (hexCharSet at: i \\ 16 + 1)]
				ifFalse: [stream nextPut: ch]].
	^stream contents!

webHttpUrlEncodedForPost
	"Answer the receiver encoded in x-www-form-urlencoded format."

	| stream specialCharacters hexCharSet i |
	hexCharSet := '0123456789ABCDEF'.
	specialCharacters := #($~ $/ $[ $\ $] $^ $` $: $; $< $= $> $? $@ $" $' $# $% $& ${ $| $} $+).
	stream := WriteStream on: (self species new: self size).
	self do: 
			[:ch | 
			i := ch asInteger.
			(i <= 32 or: [i > 127 or: [specialCharacters includes: ch]]) 
				ifTrue: 
					[stream nextPut: $%.
					stream
						nextPut: (hexCharSet at: i // 16 + 1);
						nextPut: (hexCharSet at: i \\ 16 + 1)]
				ifFalse: [stream nextPut: ch]].
	^stream contents!

webJavascriptStringEncoded
	| writeStream |
	writeStream := WriteStream on: (String new: self size + 200).
	self webJavascriptStringEncodedOn: writeStream.
	^writeStream contents!

webJavascriptStringEncodedOn: writeStream 
	| ch codePoint |
	1 to: self size
		do: 
			[:i | 
			ch := self at: i.
			codePoint := ch asInteger.
			codePoint = 13 
				ifTrue: [writeStream nextPutAll: '\r']
				ifFalse: 
					[codePoint = 10 
						ifTrue: [writeStream nextPutAll: '\n']
						ifFalse: 
							[ch = $" 
								ifTrue: [writeStream nextPutAll: '\"']
								ifFalse: 
									[ch = $\ 
										ifTrue: [writeStream nextPutAll: '\\']
										ifFalse: 
											[ch = $' 
												ifTrue: [writeStream nextPutAll: '\''']
												ifFalse: 
													[(ch = $> or: [codePoint < 32]) 
														ifTrue: 
															[writeStream
																nextPutAll: '\x';
																nextPutAll: (codePoint asHexString trimOrZeroPadToSize: 2)]
														ifFalse: [writeStream nextPut: ch]]]]]]]!

webRemoveHtmlFormatting
	"Metoda odstrani vse HTML tag-e za formatiranje besedila iz prevoda. To je potrebno za prikaz v Javascript promptu."

	^((((((self copyReplaceAll: '<br>' with: '
') copyReplaceAll: '<br/>' with: '
') 
		copyReplaceAll: '<br />'
		with: '
') copyReplaceAll: '<b>' with: '') 
		copyReplaceAll: '</b>'
		with: '') copyReplaceAll: '<p>' with: '') 
		copyReplaceAll: '</p>'
		with: '
'!

webTranslate
	^WebTranslationService translate: self using: Processor activeProcess languageDict!

webTranslateIfAbsent: aBlock 
	^WebTranslationService 
		translate: self
		using: Processor activeProcess languageDict
		ifAbsent: aBlock!

webTranslateInto: aLanguageId 
	^WebTranslationService translate: self into: aLanguageId!

webTranslateIntoOrNil: aLanguageId 
	^WebTranslationService translateOrNil: self into: aLanguageId!

webTranslateWith: aString 
	| in out ch |
	out := WriteStream on: (String new: 512).
	in := ReadStream 
				on: (WebTranslationService translate: self using: Processor activeProcess languageDict).
	[in atEnd] whileFalse: 
			[ch := in next.
			(ch = $% and: [in atEnd not and: [in peek = $% or: [in peek = $1]]]) 
				ifTrue: 
					[in next = $1 ifFalse: [out nextPut: $%] ifTrue: [out nextPutAll: aString asWebString]]
				ifFalse: [out nextPut: ch]].
	^out contents!

webTranslateWith: aString into: languageName 
	| translation stream resultString |
	resultString := ''.
	translation := self webTranslateInto: languageName.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[stream next.
					resultString := resultString , aString]].
	^resultString!

webTranslateWith: firstString with: secondString 
	| translation stream resultString where |
	resultString := ''.
	translation := self webTranslate.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[where := stream next.
					where = $1 ifTrue: [resultString := resultString , firstString asWebString].
					where = $2 ifTrue: [resultString := resultString , secondString asWebString]]].
	^resultString!

webTranslateWith: firstString with: secondString into: languageName 
	| translation stream resultString where |
	resultString := ''.
	translation := self webTranslateInto: languageName.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[where := stream next.
					where = $1 ifTrue: [resultString := resultString , firstString asWebString].
					where = $2 ifTrue: [resultString := resultString , secondString asWebString]]].
	^resultString!

webTranslateWith: firstString with: secondString with: thirdString 
	| translation stream resultString where |
	resultString := ''.
	translation := self webTranslate.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[where := stream next.
					where = $1 ifTrue: [resultString := resultString , firstString asWebString].
					where = $2 ifTrue: [resultString := resultString , secondString asWebString].
					where = $3 ifTrue: [resultString := resultString , thirdString asWebString]]].
	^resultString!

webTranslateWith: firstString with: secondString with: thirdString ifAbsent: aBlock 
	| translation stream resultString where |
	resultString := ''.
	translation := self webTranslateIntoOrNil: Processor activeProcess language.
	translation isNil ifTrue: [^aBlock value].
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[where := stream next.
					where = $1 ifTrue: [resultString := resultString , firstString asWebString].
					where = $2 ifTrue: [resultString := resultString , secondString asWebString].
					where = $3 ifTrue: [resultString := resultString , thirdString asWebString]]].
	^resultString!

webTranslateWith: firstString with: secondString with: thirdString into: languageName 
	| translation stream resultString where |
	resultString := ''.
	translation := self webTranslateInto: languageName.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[where := stream next.
					where = $1 ifTrue: [resultString := resultString , firstString asWebString].
					where = $2 ifTrue: [resultString := resultString , secondString asWebString].
					where = $3 ifTrue: [resultString := resultString , thirdString asWebString]]].
	^resultString!

webTranslateWith: firstString with: secondString with: thirdString with: fourthString 
	| translation stream resultString where |
	resultString := ''.
	translation := self webTranslate.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[where := stream next.
					where = $1 ifTrue: [resultString := resultString , firstString asWebString].
					where = $2 ifTrue: [resultString := resultString , secondString asWebString].
					where = $3 ifTrue: [resultString := resultString , thirdString asWebString].
					where = $4 ifTrue: [resultString := resultString , fourthString asWebString]]].
	^resultString!

webTranslateWith: firstString with: secondString with: thirdString with: fourthString into: languageName 
	| translation stream resultString where |
	resultString := ''.
	translation := self webTranslateInto: languageName.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream position < stream size] whileTrue: 
			[resultString := resultString , (stream upTo: $%).
			stream position = stream size 
				ifFalse: 
					[where := stream next.
					where = $1 ifTrue: [resultString := resultString , firstString asWebString].
					where = $2 ifTrue: [resultString := resultString , secondString asWebString].
					where = $3 ifTrue: [resultString := resultString , thirdString asWebString].
					where = $4 ifTrue: [resultString := resultString , fourthString asWebString]]].
	^resultString!

webTranslateWithArray: aCollection 
	| translation stream resultString index |
	resultString := ''.
	translation := self webTranslate.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream atEnd] whileFalse: 
			[resultString := resultString , (stream upTo: $%).
			stream atEnd 
				ifFalse: 
					[index := stream next asString itcAsInteger.
					(index < 1 or: [index > aCollection size]) 
						ifFalse: [resultString := resultString , (aCollection at: index) asWebString]]].
	^resultString!

webTranslateWithArray: aCollection into: languageName 
	| translation stream resultString index |
	resultString := ''.
	translation := self webTranslateInto: languageName.
	(translation includes: $%) ifFalse: [^translation].
	stream := ReadStream on: translation.
	[stream atEnd] whileFalse: 
			[resultString := resultString , (stream upTo: $%).
			stream atEnd 
				ifFalse: 
					[index := stream next asString itcAsInteger.
					(index < 1 or: [index > aCollection size]) 
						ifFalse: [resultString := resultString , (aCollection at: index) asWebString]]].
	^resultString!

webUTF16Decoded
	"This is used for UTF16 that is same as UTF-8, but it always have size of 2 bytes."

	| rs ws ch |
	rs := ReadStream on: self.
	(rs peek: 2) = #(16rFF 16rFE) asByteArray asString 
		ifTrue: 
			["ignore Unicode String header"
			rs next: 2].
	ws := WriteStream on: (String new: self size).
	[rs atEnd] whileFalse: 
			[ch := rs next.
			ch asInteger == 0 ifFalse: [ws nextPut: ch]].
	^ws contents webUTF8Decoded!

webUTF8Decoded
	| ws |
	ws := WriteStream on: String new.
	self class utf8DecodeFrom: (ReadStream on: self) on: ws.
	^ws contents!

webXhtmlUrlEncodeForForm
	"Metoda zakodira link oz. url tako, da se znak & zamenja s &amp;.
	Zamenjavo naredi samo tam, kjer le-ta se ni narejena."

	"ce ne najde nobenega & potem vrne self"

	| ws ch str |
	(self includes: $&) ifFalse: [^self].
	ws := WriteStream on: (String new: self size + 10).
	1 to: self size
		do: 
			[:i | 
			ch := self at: i.
			ws nextPut: ch.
			ch = $& 
				ifTrue: 
					[str := self copyFrom: i + 1.
					((str beginsWith: 'amp;') 
						or: [(str beginsWith: 'gt;') or: [(str beginsWith: 'lt;') or: [str beginsWith: 'quot;']]]) 
							ifFalse: [ws nextPutAll: 'amp;']]].
	^ws contents! !
!String categoriesFor: #asHtmlString!public! !
!String categoriesFor: #asJavascriptValue!public! !
!String categoriesFor: #asJavascriptValueUTF8!public! !
!String categoriesFor: #asJavascriptValueWithDecimalsToFloats!public! !
!String categoriesFor: #asJavascriptWriteEncodedString!public! !
!String categoriesFor: #asWebString!public! !
!String categoriesFor: #isAjaxAction!public! !
!String categoriesFor: #isAjaxGetAction!public! !
!String categoriesFor: #itcAsUppercase!public! !
!String categoriesFor: #printWebUrlOn:!public! !
!String categoriesFor: #webAsActionString!public! !
!String categoriesFor: #webDecrypted!public! !
!String categoriesFor: #webDeserializeFromString!public! !
!String categoriesFor: #webDisplaySize:!public! !
!String categoriesFor: #webEncrypted!public! !
!String categoriesFor: #webHtmlDecodedFromForm!public! !
!String categoriesFor: #webHtmlEncoded!public! !
!String categoriesFor: #webHtmlEncodedForForm!public! !
!String categoriesFor: #webHtmlEncodedWithoutLineBreaks!public! !
!String categoriesFor: #webHtmlEncodedWithoutLineBreaks:!public! !
!String categoriesFor: #webHttpUrlDecode:!public! !
!String categoriesFor: #webHttpUrlDecodePathComponent!public! !
!String categoriesFor: #webHttpUrlDecodeQueryComponent!public! !
!String categoriesFor: #webHttpUrlEncoded!public! !
!String categoriesFor: #webHttpUrlEncodedForPathComponent!public! !
!String categoriesFor: #webHttpUrlEncodedForPost!public! !
!String categoriesFor: #webJavascriptStringEncoded!public! !
!String categoriesFor: #webJavascriptStringEncodedOn:!public! !
!String categoriesFor: #webRemoveHtmlFormatting!public! !
!String categoriesFor: #webTranslate!public! !
!String categoriesFor: #webTranslateIfAbsent:!public! !
!String categoriesFor: #webTranslateInto:!public! !
!String categoriesFor: #webTranslateIntoOrNil:!public! !
!String categoriesFor: #webTranslateWith:!public! !
!String categoriesFor: #webTranslateWith:into:!public! !
!String categoriesFor: #webTranslateWith:with:!public! !
!String categoriesFor: #webTranslateWith:with:into:!public! !
!String categoriesFor: #webTranslateWith:with:with:!public! !
!String categoriesFor: #webTranslateWith:with:with:ifAbsent:!public! !
!String categoriesFor: #webTranslateWith:with:with:into:!public! !
!String categoriesFor: #webTranslateWith:with:with:with:!public! !
!String categoriesFor: #webTranslateWith:with:with:with:into:!public! !
!String categoriesFor: #webTranslateWithArray:!public! !
!String categoriesFor: #webTranslateWithArray:into:!public! !
!String categoriesFor: #webUTF16Decoded!public! !
!String categoriesFor: #webUTF8Decoded!public! !
!String categoriesFor: #webXhtmlUrlEncodeForForm!public! !

!Symbol methodsFor!

asJavascriptValue
	^self asString asJavascriptValue!

asWebActionUrlString
	self isEmpty ifTrue: [^self].
	^(self size > 7 and: [self beginsWith: 'process']) 
		ifTrue: [(self at: 8) asLowercase asString , (self copyFrom: 9)]
		ifFalse: [self first asLowercase asString , (self copyFrom: 2)]!

asWebString
	^self asString!

webAsActionString
	| str i |
	str := self asString.
	(str beginsWith: 'ajaxGet') ifTrue: [^str].
	(str beginsWith: 'ajaxPost') ifTrue: [^str].
	(str beginsWith: 'process') ifFalse: [self error: 'Not an action string'].
	str := str copyFrom: 8.
	str at: 1 put: str first asLowercase.
	^(i := str indexOf: $:) > 0 ifTrue: [str copyFrom: 1 to: i - 1] ifFalse: [str]! !
!Symbol categoriesFor: #asJavascriptValue!public! !
!Symbol categoriesFor: #asWebActionUrlString!public! !
!Symbol categoriesFor: #asWebString!public! !
!Symbol categoriesFor: #webAsActionString!public! !

!Time methodsFor!

asShortWebString
	^ItcConverter getShortStringFromTime: self!

asWebString
	^ItcConverter getStringFromTime: self! !
!Time categoriesFor: #asShortWebString!public! !
!Time categoriesFor: #asWebString!public! !

!Timestamp methodsFor!

asShortWebString

	^self date asShortWebString, ' ', self time asShortWebString!

asWebString

	^self date asWebString, ' ', self time asWebString!

webAsSqlString
	^self webAsSqlStringIn: Processor activeProcess webApplication!

webAsSqlStringIn: application

	| ws |
	ws := WriteStream on: (String new: 16).
	application dbConnectionClass objectModelFactory typeTimeStamp putValue: self on: ws.
	^ws contents! !
!Timestamp categoriesFor: #asShortWebString!public! !
!Timestamp categoriesFor: #asWebString!public! !
!Timestamp categoriesFor: #webAsSqlString!public! !
!Timestamp categoriesFor: #webAsSqlStringIn:!public! !

!True methodsFor!

asJavascriptValue
	^'true'!

asJavascriptValueUTF8
	^self asJavascriptValue!

asWebString
	^'asp.label.Yes' webTranslate! !
!True categoriesFor: #asJavascriptValue!public! !
!True categoriesFor: #asJavascriptValueUTF8!public! !
!True categoriesFor: #asWebString!public! !

!UndefinedObject methodsFor!

asJavascriptValue
	^'null'!

asJavascriptValueUTF8
	^self asJavascriptValue!

asWebString

	^''!

getIntegerId
	^nil!

isAjaxAction
	^false!

webAsActionString
	^nil! !
!UndefinedObject categoriesFor: #asJavascriptValue!public! !
!UndefinedObject categoriesFor: #asJavascriptValueUTF8!public! !
!UndefinedObject categoriesFor: #asWebString!public! !
!UndefinedObject categoriesFor: #getIntegerId!public! !
!UndefinedObject categoriesFor: #isAjaxAction!public! !
!UndefinedObject categoriesFor: #webAsActionString!public! !

"End of package definition"!

