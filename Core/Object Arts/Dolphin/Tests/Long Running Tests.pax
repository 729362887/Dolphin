| package |
package := Package name: 'Long Running Tests'.
package paxVersion: 1;
	basicComment: 'These tests take rather a long time to run (but do pass eventually). This package is not loaded during normal regression testing to allow the test pass to complete in a reasonable time.'.


package methodNames
	add: #CompilerTest -> #testTextMapExhaustive;
	add: #VMTest -> #assertLoopInterruptible:;
	add: #VMTest -> #testLoopsInterruptible;
	add: #VMTest -> #testQuiesceWhenUIBlocked;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\IDE\Base\Development System Tests';
	add: '..\Base\Dolphin';
	yourself).

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!CompilerTest methodsFor!

testTextMapExhaustive
	"Check that the release and debug text maps match for every method in the system .... with a
	couple of exceptions... ahem"

	self knownTextMapIssues not methodsDo: 
			[:each | 
			| debugTextMap debugMethod info textMap result |
			result := self getDebugInfoFor: each debug: true.
			debugMethod := result method.
			"If fails then the method failed to compile"
			self assert: debugMethod notNil.
			info := each debugInfo.
			textMap := info textMap.
			debugTextMap := result textMap.
			"The text maps should contain exactly the same number of entries, and the text range for each entry should be the same"
			textMap with: debugTextMap do: [:a :b | self assert: a value = b value].
			debugTextMap do: 
					[:assoc | 
					| byte ip |
					ip := assoc key.
					ip == 0 
						ifFalse: 
							[byte := debugMethod byteCodes at: ip.
							self assert: byte ~= 0]]]! !
!CompilerTest categoriesFor: #testTextMapExhaustive!public!unit tests-long running! !

!VMTest methodsFor!

assertLoopInterruptible: aBlock 
	| intervals execTime last sampleInterval go |
	go := true.
	last := Time millisecondClockValue.
	intervals := OrderedCollection new.
	sampleInterval := 3.
	
	[
	[Processor sleep: sampleInterval.
	go and: 
			[| next |
			next := Time millisecondClockValue.
			intervals addLast: next - last.
			last := next.
			true]] 
			whileTrue] 
			forkAt: Processor userInterruptPriority.
	execTime := Time millisecondsToRun: aBlock.
	go := false.
	self assert: (intervals size > 5 and: [intervals size * 1.25 >= (execTime / sampleInterval) asFloat]).
	self 
		assert: (intervals size > 2 and: [intervals allSatisfy: [:each | each < (sampleInterval * 2)]])!

testLoopsInterruptible
	"#2167: Need to test all the optimisable loop types:
		#timesRepeat:
		#whileTrue[:]
		#whileFalse[:]
		#to:[by:]do:
		#repeat		(hmmm, tricky, need some way to break the loop)
	The loops must not contain any true mesage sends, only bytecodes"

	"#timesRepeat:"

	self assertLoopInterruptible: [3000000 timesRepeat: [1 + 2]].
	"#whileFalse"
	self assertLoopInterruptible: 
			[| i |
			i := 0.
			
			[i := i + 1.
			i > 5000000] whileFalse].
	"#whileTrue"
	self assertLoopInterruptible: 
			[| i |
			i := 0.
			
			[i := i + 1.
			i <= 5000000] whileTrue].
	"#whileFalse:"
	self assertLoopInterruptible: 
			[| i |
			i := 0.
			[i >= 5000000] whileFalse: [i := i + 1]].
	"#whileTrue:"
	self assertLoopInterruptible: 
			[| i |
			i := 0.
			[i < 5000000] whileTrue: [i := i + 1]].
	"#to:do:"
	self assertLoopInterruptible: [1 to: 5000000 do: [:i | i + 1]].
	"#to:by:do:"
	self assertLoopInterruptible: 
			[1 to: 10000000
				by: 2
				do: [:i | i + 1]].
	self assertLoopInterruptible: 
			[5000000 to: 1
				by: -1
				do: [:i | i + 1]]!

testQuiesceWhenUIBlocked
	"#969: Dolphin burns 100% CPU when main UI process blocked on Semaphore"

	| totalCPUBefore cpuWhileSleeping sleepTime wait |
	totalCPUBefore := self getCPUTime.
	"This test needs to measure over a minimum of 2 seconds in order to determine whether Dolphin has quiesced properly"
	wait := 3000.
	sleepTime := Time millisecondsToRun: [Processor sleep: wait].
	cpuWhileSleeping := self getCPUTime - totalCPUBefore.
	"If the sleep time was significantly longer than requested, then the VM is not waking up the image
	 properly at the end of the timer"
	self assert: (sleepTime between: wait * 0.9 and: wait * 1.1).
	"The VM should quiesce properly, even if events are waiting to be processed, so very little CPU time should have been consumed"
	self assert: cpuWhileSleeping < (wait * 0.03)! !
!VMTest categoriesFor: #assertLoopInterruptible:!private!unit tests! !
!VMTest categoriesFor: #testLoopsInterruptible!public!unit tests! !
!VMTest categoriesFor: #testQuiesceWhenUIBlocked!public!unit tests! !

"End of package definition"!

