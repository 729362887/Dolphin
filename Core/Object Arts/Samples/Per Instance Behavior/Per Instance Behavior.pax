| package |
package := Package name: 'Per Instance Behavior'.
package paxVersion: 1;
	basicComment: 'Dolphin Smalltalk Per-instance Behaviour Sample. 
Copyright (c) Object Arts Ltd, 2002'.


package methodNames
	add: #Object -> #allowPerInstanceBehavior;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\..\Dolphin\Base\Dolphin';
	yourself).

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!Object methodsFor!

allowPerInstanceBehavior
	"Private - Make the receiver a prototypical instance of it's own private class. From this point on
	the instance may have it's own behaviour modified or added to."

	| metaSuperclass newMetaclass newClass |

	"Create a private new metaclass"
	metaSuperclass := self class class.
	(newMetaclass := Metaclass new)
	methodDictionary: MethodDictionary new;
	instanceSpec: metaSuperclass instanceSpec;
	superclass: metaSuperclass.

	"Create a private instance of this metaclass as the new class"
	(newClass := newMetaclass new)
	methodDictionary: MethodDictionary new;
	instanceSpec: self class instanceSpec;
	setName: ('_', self class name) asSymbol;
           superclass: self class.
	
	self becomeA: newClass.! !
!Object categoriesFor: #allowPerInstanceBehavior!helpers!private! !

"End of package definition"!

